// Licence file C:\Users\Victor\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace GraphDemo.Model
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IOMSOrdersContext : IDisposable
    {
        DbSet<Customer> Customers { get; set; } // Customers
        DbSet<Order> Orders { get; set; } // Orders
        DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetails
        DbSet<OrderDetailLine> OrderDetailLines { get; set; } // OrderDetailLines
        DbSet<OrderHeader> OrderHeaders { get; set; } // OrderHeaders

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class OMSOrdersContext : DbContext, IOMSOrdersContext
    {
        public OMSOrdersContext()
        {
        }

        public OMSOrdersContext(DbContextOptions<OMSOrdersContext> options)
            : base(options)
        {
        }

        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetails
        public DbSet<OrderDetailLine> OrderDetailLines { get; set; } // OrderDetailLines
        public DbSet<OrderHeader> OrderHeaders { get; set; } // OrderHeaders

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(local)\SQLEXPRESS;Initial Catalog=GraphDemo;Integrated Security=True;MultipleActiveResultSets=True;App=EntityFramework");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new OrderConfiguration());
            modelBuilder.ApplyConfiguration(new OrderDetailConfiguration());
            modelBuilder.ApplyConfiguration(new OrderDetailLineConfiguration());
            modelBuilder.ApplyConfiguration(new OrderHeaderConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class OMSOrdersContextFactory : IDesignTimeDbContextFactory<OMSOrdersContext>
    {
        public OMSOrdersContext CreateDbContext(string[] args)
        {
            return new OMSOrdersContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeOMSOrdersContext : IOMSOrdersContext
    {
        public DbSet<Customer> Customers { get; set; } // Customers
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetails
        public DbSet<OrderDetailLine> OrderDetailLines { get; set; } // OrderDetailLines
        public DbSet<OrderHeader> OrderHeaders { get; set; } // OrderHeaders

        public FakeOMSOrdersContext()
        {
            _database = null;

            Customers = new FakeDbSet<Customer>("CustomerId");
            Orders = new FakeDbSet<Order>("OrderId");
            OrderDetails = new FakeDbSet<OrderDetail>("OrderDetailId");
            OrderDetailLines = new FakeDbSet<OrderDetailLine>("OrderDetailLineId");
            OrderHeaders = new FakeDbSet<OrderHeader>("OrderHeaderId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Customers
    public class Customer
    {
        public int CustomerId { get; set; } // CustomerId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child OrderHeaders where [OrderHeaders].[CustomerId] point to this entity (FK__OrderHead__Custo__20C1E124)
        /// </summary>
        public virtual ICollection<OrderHeader> OrderHeaders { get; set; } // OrderHeaders.FK__OrderHead__Custo__20C1E124

        public Customer()
        {
            OrderHeaders = new List<OrderHeader>();
        }
    }

    // Orders
    public class Order
    {
        public int OrderId { get; set; } // OrderId (Primary key)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Order pointed by [OrderDetails].[OrderId] (FK__OrderDeta__Order__47DBAE45)
        /// </summary>
        public virtual OrderDetail OrderDetail { get; set; } // OrderDetails.FK__OrderDeta__Order__47DBAE45

        /// <summary>
        /// Parent (One-to-One) Order pointed by [OrderHeaders].[OrderId] (FK__OrderHead__Order__21B6055D)
        /// </summary>
        public virtual OrderHeader OrderHeader { get; set; } // OrderHeaders.FK__OrderHead__Order__21B6055D
    }

    // OrderDetails
    public class OrderDetail
    {
        public int OrderDetailId { get; set; } // OrderDetailId (Primary key)
        public int OrderId { get; set; } // OrderId

        // Reverse navigation

        /// <summary>
        /// Child OrderDetailLines where [OrderDetailLines].[OrderDetailId] point to this entity (FK__OrderDeta__Order__4F7CD00D)
        /// </summary>
        public virtual ICollection<OrderDetailLine> OrderDetailLines { get; set; } // OrderDetailLines.FK__OrderDeta__Order__4F7CD00D

        // Foreign keys

        /// <summary>
        /// Parent Order pointed by [OrderDetails].([OrderId]) (FK__OrderDeta__Order__47DBAE45)
        /// </summary>
        public virtual Order Order { get; set; } // FK__OrderDeta__Order__47DBAE45

        public OrderDetail()
        {
            OrderDetailLines = new List<OrderDetailLine>();
        }
    }

    // OrderDetailLines
    public class OrderDetailLine
    {
        public int OrderDetailLineId { get; set; } // OrderDetailLineId (Primary key)
        public int OrderDetailId { get; set; } // OrderDetailId
        public short OrderDetailLineNum { get; set; } // OrderDetailLineNum
        public string OrderDetailLineDetail { get; set; } // OrderDetailLineDetail (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent OrderDetail pointed by [OrderDetailLines].([OrderDetailId]) (FK__OrderDeta__Order__4F7CD00D)
        /// </summary>
        public virtual OrderDetail OrderDetail { get; set; } // FK__OrderDeta__Order__4F7CD00D
    }

    // OrderHeaders
    public class OrderHeader
    {
        public int OrderHeaderId { get; set; } // OrderHeaderId (Primary key)
        public DateTime OrderedDate { get; set; } // OrderedDate
        public int CustomerId { get; set; } // CustomerId
        public int OrderId { get; set; } // OrderId

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [OrderHeaders].([CustomerId]) (FK__OrderHead__Custo__20C1E124)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK__OrderHead__Custo__20C1E124

        /// <summary>
        /// Parent Order pointed by [OrderHeaders].([OrderId]) (FK__OrderHead__Order__21B6055D)
        /// </summary>
        public virtual Order Order { get; set; } // FK__OrderHead__Order__21B6055D
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Customers
    public class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.ToTable("Customers", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK_Customers").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // Orders
    public class OrderConfiguration : IEntityTypeConfiguration<Order>
    {
        public void Configure(EntityTypeBuilder<Order> builder)
        {
            builder.ToTable("Orders", "dbo");
            builder.HasKey(x => x.OrderId).HasName("PK_Orders").IsClustered();

            builder.Property(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
        }
    }

    // OrderDetails
    public class OrderDetailConfiguration : IEntityTypeConfiguration<OrderDetail>
    {
        public void Configure(EntityTypeBuilder<OrderDetail> builder)
        {
            builder.ToTable("OrderDetails", "dbo");
            builder.HasKey(x => x.OrderDetailId).HasName("PK_OrderDetail").IsClustered();

            builder.Property(x => x.OrderDetailId).HasColumnName(@"OrderDetailId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Order).WithOne(b => b.OrderDetail).HasForeignKey<OrderDetail>(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderDeta__Order__47DBAE45");

            builder.HasIndex(x => x.OrderId).HasDatabaseName("UQ__OrderDet__C3905BCEFB1B9A75").IsUnique();
        }
    }

    // OrderDetailLines
    public class OrderDetailLineConfiguration : IEntityTypeConfiguration<OrderDetailLine>
    {
        public void Configure(EntityTypeBuilder<OrderDetailLine> builder)
        {
            builder.ToTable("OrderDetailLines", "dbo");
            builder.HasKey(x => x.OrderDetailLineId).HasName("PK_OrderDetailLines").IsClustered();

            builder.Property(x => x.OrderDetailLineId).HasColumnName(@"OrderDetailLineId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderDetailId).HasColumnName(@"OrderDetailId").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderDetailLineNum).HasColumnName(@"OrderDetailLineNum").HasColumnType("smallint").IsRequired();
            builder.Property(x => x.OrderDetailLineDetail).HasColumnName(@"OrderDetailLineDetail").HasColumnType("nchar(10)").IsRequired().IsFixedLength().HasMaxLength(10);

            // Foreign keys
            builder.HasOne(a => a.OrderDetail).WithMany(b => b.OrderDetailLines).HasForeignKey(c => c.OrderDetailId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderDeta__Order__4F7CD00D");
        }
    }

    // OrderHeaders
    public class OrderHeaderConfiguration : IEntityTypeConfiguration<OrderHeader>
    {
        public void Configure(EntityTypeBuilder<OrderHeader> builder)
        {
            builder.ToTable("OrderHeaders", "dbo");
            builder.HasKey(x => x.OrderHeaderId).HasName("PK_OrderHeaders").IsClustered();

            builder.Property(x => x.OrderHeaderId).HasColumnName(@"OrderHeaderId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.OrderedDate).HasColumnName(@"OrderedDate").HasColumnType("date").IsRequired();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("int").IsRequired();
            builder.Property(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.OrderHeaders).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderHead__Custo__20C1E124");
            builder.HasOne(a => a.Order).WithOne(b => b.OrderHeader).HasForeignKey<OrderHeader>(c => c.OrderId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__OrderHead__Order__21B6055D");

            builder.HasIndex(x => x.OrderId).HasDatabaseName("UQ__OrderHea__C3905BCEDC3DCF25").IsUnique();
        }
    }


    #endregion

}
// </auto-generated>
